// Code generated by protoc-gen-go. DO NOT EDIT.
// source: file/file.proto

package gnoi_file

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	common "github.com/openconfig/gnoi/common"
	types "github.com/openconfig/gnoi/types"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A PutRequest is used to send data to be written on a file on the target.
//
// The initial message contains an Open message. The Open message contains
// information name of the file and the file's permisssions.
//
// The remote_file must be an absolute path. If remote_file already exists on
// the target, it is overwritten, otherwise it is created. If the path to
// remote_file doesn't exist it will be created.
//
// The contents to be written are streamed through multiple messages using the
// contents field. Each message may contain up to 64KB of data.
//
// The final message of the RPC contains the hash of the file contents.
type PutRequest struct {
	// Types that are valid to be assigned to Request:
	//	*PutRequest_Open
	//	*PutRequest_Contents
	//	*PutRequest_Hash
	Request              isPutRequest_Request `protobuf_oneof:"request"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PutRequest) Reset()         { *m = PutRequest{} }
func (m *PutRequest) String() string { return proto.CompactTextString(m) }
func (*PutRequest) ProtoMessage()    {}
func (*PutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad806f8986a0c3f6, []int{0}
}

func (m *PutRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PutRequest.Unmarshal(m, b)
}
func (m *PutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PutRequest.Marshal(b, m, deterministic)
}
func (m *PutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutRequest.Merge(m, src)
}
func (m *PutRequest) XXX_Size() int {
	return xxx_messageInfo_PutRequest.Size(m)
}
func (m *PutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PutRequest proto.InternalMessageInfo

type isPutRequest_Request interface {
	isPutRequest_Request()
}

type PutRequest_Open struct {
	Open *PutRequest_Details `protobuf:"bytes,1,opt,name=open,proto3,oneof"`
}

type PutRequest_Contents struct {
	Contents []byte `protobuf:"bytes,2,opt,name=contents,proto3,oneof"`
}

type PutRequest_Hash struct {
	Hash *types.HashType `protobuf:"bytes,3,opt,name=hash,proto3,oneof"`
}

func (*PutRequest_Open) isPutRequest_Request() {}

func (*PutRequest_Contents) isPutRequest_Request() {}

func (*PutRequest_Hash) isPutRequest_Request() {}

func (m *PutRequest) GetRequest() isPutRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *PutRequest) GetOpen() *PutRequest_Details {
	if x, ok := m.GetRequest().(*PutRequest_Open); ok {
		return x.Open
	}
	return nil
}

func (m *PutRequest) GetContents() []byte {
	if x, ok := m.GetRequest().(*PutRequest_Contents); ok {
		return x.Contents
	}
	return nil
}

func (m *PutRequest) GetHash() *types.HashType {
	if x, ok := m.GetRequest().(*PutRequest_Hash); ok {
		return x.Hash
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PutRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PutRequest_OneofMarshaler, _PutRequest_OneofUnmarshaler, _PutRequest_OneofSizer, []interface{}{
		(*PutRequest_Open)(nil),
		(*PutRequest_Contents)(nil),
		(*PutRequest_Hash)(nil),
	}
}

func _PutRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PutRequest)
	// request
	switch x := m.Request.(type) {
	case *PutRequest_Open:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Open); err != nil {
			return err
		}
	case *PutRequest_Contents:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Contents)
	case *PutRequest_Hash:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Hash); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PutRequest.Request has unexpected type %T", x)
	}
	return nil
}

func _PutRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PutRequest)
	switch tag {
	case 1: // request.open
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PutRequest_Details)
		err := b.DecodeMessage(msg)
		m.Request = &PutRequest_Open{msg}
		return true, err
	case 2: // request.contents
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Request = &PutRequest_Contents{x}
		return true, err
	case 3: // request.hash
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.HashType)
		err := b.DecodeMessage(msg)
		m.Request = &PutRequest_Hash{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PutRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PutRequest)
	// request
	switch x := m.Request.(type) {
	case *PutRequest_Open:
		s := proto.Size(x.Open)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PutRequest_Contents:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Contents)))
		n += len(x.Contents)
	case *PutRequest_Hash:
		s := proto.Size(x.Hash)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type PutRequest_Details struct {
	RemoteFile string `protobuf:"bytes,1,opt,name=remote_file,json=remoteFile,proto3" json:"remote_file,omitempty"`
	// Permissions are represented as the octal format of standard UNIX
	// file permissions.
	// ex. 775: user read/write/execute, group read/write/execute,
	// global read/execute.
	Permissions          uint32   `protobuf:"varint,2,opt,name=permissions,proto3" json:"permissions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PutRequest_Details) Reset()         { *m = PutRequest_Details{} }
func (m *PutRequest_Details) String() string { return proto.CompactTextString(m) }
func (*PutRequest_Details) ProtoMessage()    {}
func (*PutRequest_Details) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad806f8986a0c3f6, []int{0, 0}
}

func (m *PutRequest_Details) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PutRequest_Details.Unmarshal(m, b)
}
func (m *PutRequest_Details) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PutRequest_Details.Marshal(b, m, deterministic)
}
func (m *PutRequest_Details) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutRequest_Details.Merge(m, src)
}
func (m *PutRequest_Details) XXX_Size() int {
	return xxx_messageInfo_PutRequest_Details.Size(m)
}
func (m *PutRequest_Details) XXX_DiscardUnknown() {
	xxx_messageInfo_PutRequest_Details.DiscardUnknown(m)
}

var xxx_messageInfo_PutRequest_Details proto.InternalMessageInfo

func (m *PutRequest_Details) GetRemoteFile() string {
	if m != nil {
		return m.RemoteFile
	}
	return ""
}

func (m *PutRequest_Details) GetPermissions() uint32 {
	if m != nil {
		return m.Permissions
	}
	return 0
}

type PutResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PutResponse) Reset()         { *m = PutResponse{} }
func (m *PutResponse) String() string { return proto.CompactTextString(m) }
func (*PutResponse) ProtoMessage()    {}
func (*PutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad806f8986a0c3f6, []int{1}
}

func (m *PutResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PutResponse.Unmarshal(m, b)
}
func (m *PutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PutResponse.Marshal(b, m, deterministic)
}
func (m *PutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutResponse.Merge(m, src)
}
func (m *PutResponse) XXX_Size() int {
	return xxx_messageInfo_PutResponse.Size(m)
}
func (m *PutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PutResponse proto.InternalMessageInfo

// A GetRequest specifies the remote_file to be streamed back
// to the caller. The remote_file must be an absolute path to an
// existing file.
type GetRequest struct {
	RemoteFile           string   `protobuf:"bytes,1,opt,name=remote_file,json=remoteFile,proto3" json:"remote_file,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad806f8986a0c3f6, []int{2}
}

func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRequest.Unmarshal(m, b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return xxx_messageInfo_GetRequest.Size(m)
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetRemoteFile() string {
	if m != nil {
		return m.RemoteFile
	}
	return ""
}

// A GetResponse either contains the next set of bytes read from the
// file or, as the last message, the hash of the data.
type GetResponse struct {
	// Types that are valid to be assigned to Response:
	//	*GetResponse_Contents
	//	*GetResponse_Hash
	Response             isGetResponse_Response `protobuf_oneof:"response"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetResponse) Reset()         { *m = GetResponse{} }
func (m *GetResponse) String() string { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()    {}
func (*GetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad806f8986a0c3f6, []int{3}
}

func (m *GetResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetResponse.Unmarshal(m, b)
}
func (m *GetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetResponse.Marshal(b, m, deterministic)
}
func (m *GetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResponse.Merge(m, src)
}
func (m *GetResponse) XXX_Size() int {
	return xxx_messageInfo_GetResponse.Size(m)
}
func (m *GetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetResponse proto.InternalMessageInfo

type isGetResponse_Response interface {
	isGetResponse_Response()
}

type GetResponse_Contents struct {
	Contents []byte `protobuf:"bytes,1,opt,name=contents,proto3,oneof"`
}

type GetResponse_Hash struct {
	Hash *types.HashType `protobuf:"bytes,2,opt,name=hash,proto3,oneof"`
}

func (*GetResponse_Contents) isGetResponse_Response() {}

func (*GetResponse_Hash) isGetResponse_Response() {}

func (m *GetResponse) GetResponse() isGetResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *GetResponse) GetContents() []byte {
	if x, ok := m.GetResponse().(*GetResponse_Contents); ok {
		return x.Contents
	}
	return nil
}

func (m *GetResponse) GetHash() *types.HashType {
	if x, ok := m.GetResponse().(*GetResponse_Hash); ok {
		return x.Hash
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetResponse_OneofMarshaler, _GetResponse_OneofUnmarshaler, _GetResponse_OneofSizer, []interface{}{
		(*GetResponse_Contents)(nil),
		(*GetResponse_Hash)(nil),
	}
}

func _GetResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetResponse)
	// response
	switch x := m.Response.(type) {
	case *GetResponse_Contents:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Contents)
	case *GetResponse_Hash:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Hash); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetResponse.Response has unexpected type %T", x)
	}
	return nil
}

func _GetResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetResponse)
	switch tag {
	case 1: // response.contents
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Response = &GetResponse_Contents{x}
		return true, err
	case 2: // response.hash
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.HashType)
		err := b.DecodeMessage(msg)
		m.Response = &GetResponse_Hash{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GetResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetResponse)
	// response
	switch x := m.Response.(type) {
	case *GetResponse_Contents:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Contents)))
		n += len(x.Contents)
	case *GetResponse_Hash:
		s := proto.Size(x.Hash)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// A TransferToRemoteRequest specifies the local path to transfer to and the
// details on where to transfer the data from. The local_path must be an
// absolute path to the file.
type TransferToRemoteRequest struct {
	LocalPath string `protobuf:"bytes,1,opt,name=local_path,json=localPath,proto3" json:"local_path,omitempty"`
	// Details to download the remote_file being requested to a remote location.
	RemoteDownload       *common.RemoteDownload `protobuf:"bytes,2,opt,name=remote_download,json=remoteDownload,proto3" json:"remote_download,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *TransferToRemoteRequest) Reset()         { *m = TransferToRemoteRequest{} }
func (m *TransferToRemoteRequest) String() string { return proto.CompactTextString(m) }
func (*TransferToRemoteRequest) ProtoMessage()    {}
func (*TransferToRemoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad806f8986a0c3f6, []int{4}
}

func (m *TransferToRemoteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransferToRemoteRequest.Unmarshal(m, b)
}
func (m *TransferToRemoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransferToRemoteRequest.Marshal(b, m, deterministic)
}
func (m *TransferToRemoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferToRemoteRequest.Merge(m, src)
}
func (m *TransferToRemoteRequest) XXX_Size() int {
	return xxx_messageInfo_TransferToRemoteRequest.Size(m)
}
func (m *TransferToRemoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferToRemoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransferToRemoteRequest proto.InternalMessageInfo

func (m *TransferToRemoteRequest) GetLocalPath() string {
	if m != nil {
		return m.LocalPath
	}
	return ""
}

func (m *TransferToRemoteRequest) GetRemoteDownload() *common.RemoteDownload {
	if m != nil {
		return m.RemoteDownload
	}
	return nil
}

// A TransferToRemoteResponse contains the hash of the data transferred.
type TransferToRemoteResponse struct {
	Hash                 *types.HashType `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *TransferToRemoteResponse) Reset()         { *m = TransferToRemoteResponse{} }
func (m *TransferToRemoteResponse) String() string { return proto.CompactTextString(m) }
func (*TransferToRemoteResponse) ProtoMessage()    {}
func (*TransferToRemoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad806f8986a0c3f6, []int{5}
}

func (m *TransferToRemoteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransferToRemoteResponse.Unmarshal(m, b)
}
func (m *TransferToRemoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransferToRemoteResponse.Marshal(b, m, deterministic)
}
func (m *TransferToRemoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferToRemoteResponse.Merge(m, src)
}
func (m *TransferToRemoteResponse) XXX_Size() int {
	return xxx_messageInfo_TransferToRemoteResponse.Size(m)
}
func (m *TransferToRemoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferToRemoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransferToRemoteResponse proto.InternalMessageInfo

func (m *TransferToRemoteResponse) GetHash() *types.HashType {
	if m != nil {
		return m.Hash
	}
	return nil
}

// StatRequest will list files at the provided path.
type StatRequest struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatRequest) Reset()         { *m = StatRequest{} }
func (m *StatRequest) String() string { return proto.CompactTextString(m) }
func (*StatRequest) ProtoMessage()    {}
func (*StatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad806f8986a0c3f6, []int{6}
}

func (m *StatRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatRequest.Unmarshal(m, b)
}
func (m *StatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatRequest.Marshal(b, m, deterministic)
}
func (m *StatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatRequest.Merge(m, src)
}
func (m *StatRequest) XXX_Size() int {
	return xxx_messageInfo_StatRequest.Size(m)
}
func (m *StatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StatRequest proto.InternalMessageInfo

func (m *StatRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

// StatResponse contains list of stat info of the provided path.
type StatResponse struct {
	Stats                []*StatInfo `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *StatResponse) Reset()         { *m = StatResponse{} }
func (m *StatResponse) String() string { return proto.CompactTextString(m) }
func (*StatResponse) ProtoMessage()    {}
func (*StatResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad806f8986a0c3f6, []int{7}
}

func (m *StatResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatResponse.Unmarshal(m, b)
}
func (m *StatResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatResponse.Marshal(b, m, deterministic)
}
func (m *StatResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatResponse.Merge(m, src)
}
func (m *StatResponse) XXX_Size() int {
	return xxx_messageInfo_StatResponse.Size(m)
}
func (m *StatResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatResponse proto.InternalMessageInfo

func (m *StatResponse) GetStats() []*StatInfo {
	if m != nil {
		return m.Stats
	}
	return nil
}

// StatInfo provides a file system information about a particular path.
type StatInfo struct {
	Path         string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	LastModified uint64 `protobuf:"varint,2,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	// Permissions are represented as the octal format of standard UNIX
	// file permissions.
	// ex. 775: user read/write/execute, group read/write/execute,
	// global read/execute.
	Permissions uint32 `protobuf:"varint,3,opt,name=permissions,proto3" json:"permissions,omitempty"`
	Size        uint64 `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	// Default file creation mask. Represented as the octal format of
	// standard UNIX mask.
	Umask                uint32   `protobuf:"varint,5,opt,name=umask,proto3" json:"umask,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatInfo) Reset()         { *m = StatInfo{} }
func (m *StatInfo) String() string { return proto.CompactTextString(m) }
func (*StatInfo) ProtoMessage()    {}
func (*StatInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad806f8986a0c3f6, []int{8}
}

func (m *StatInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatInfo.Unmarshal(m, b)
}
func (m *StatInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatInfo.Marshal(b, m, deterministic)
}
func (m *StatInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatInfo.Merge(m, src)
}
func (m *StatInfo) XXX_Size() int {
	return xxx_messageInfo_StatInfo.Size(m)
}
func (m *StatInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StatInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StatInfo proto.InternalMessageInfo

func (m *StatInfo) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *StatInfo) GetLastModified() uint64 {
	if m != nil {
		return m.LastModified
	}
	return 0
}

func (m *StatInfo) GetPermissions() uint32 {
	if m != nil {
		return m.Permissions
	}
	return 0
}

func (m *StatInfo) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *StatInfo) GetUmask() uint32 {
	if m != nil {
		return m.Umask
	}
	return 0
}

// A RemoveRequest specifies a file to be removed from the target.
type RemoveRequest struct {
	RemoteFile           string   `protobuf:"bytes,1,opt,name=remote_file,json=remoteFile,proto3" json:"remote_file,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveRequest) Reset()         { *m = RemoveRequest{} }
func (m *RemoveRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveRequest) ProtoMessage()    {}
func (*RemoveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad806f8986a0c3f6, []int{9}
}

func (m *RemoveRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveRequest.Unmarshal(m, b)
}
func (m *RemoveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveRequest.Marshal(b, m, deterministic)
}
func (m *RemoveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveRequest.Merge(m, src)
}
func (m *RemoveRequest) XXX_Size() int {
	return xxx_messageInfo_RemoveRequest.Size(m)
}
func (m *RemoveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveRequest proto.InternalMessageInfo

func (m *RemoveRequest) GetRemoteFile() string {
	if m != nil {
		return m.RemoteFile
	}
	return ""
}

type RemoveResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveResponse) Reset()         { *m = RemoveResponse{} }
func (m *RemoveResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveResponse) ProtoMessage()    {}
func (*RemoveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad806f8986a0c3f6, []int{10}
}

func (m *RemoveResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveResponse.Unmarshal(m, b)
}
func (m *RemoveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveResponse.Marshal(b, m, deterministic)
}
func (m *RemoveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveResponse.Merge(m, src)
}
func (m *RemoveResponse) XXX_Size() int {
	return xxx_messageInfo_RemoveResponse.Size(m)
}
func (m *RemoveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PutRequest)(nil), "gnoi.file.PutRequest")
	proto.RegisterType((*PutRequest_Details)(nil), "gnoi.file.PutRequest.Details")
	proto.RegisterType((*PutResponse)(nil), "gnoi.file.PutResponse")
	proto.RegisterType((*GetRequest)(nil), "gnoi.file.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "gnoi.file.GetResponse")
	proto.RegisterType((*TransferToRemoteRequest)(nil), "gnoi.file.TransferToRemoteRequest")
	proto.RegisterType((*TransferToRemoteResponse)(nil), "gnoi.file.TransferToRemoteResponse")
	proto.RegisterType((*StatRequest)(nil), "gnoi.file.StatRequest")
	proto.RegisterType((*StatResponse)(nil), "gnoi.file.StatResponse")
	proto.RegisterType((*StatInfo)(nil), "gnoi.file.StatInfo")
	proto.RegisterType((*RemoveRequest)(nil), "gnoi.file.RemoveRequest")
	proto.RegisterType((*RemoveResponse)(nil), "gnoi.file.RemoveResponse")
}

func init() { proto.RegisterFile("file/file.proto", fileDescriptor_ad806f8986a0c3f6) }

var fileDescriptor_ad806f8986a0c3f6 = []byte{
	// 600 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x8d, 0x1b, 0xa7, 0x4d, 0xae, 0x9b, 0xb6, 0x9a, 0xaf, 0x5f, 0x6b, 0x0c, 0x15, 0xc5, 0xdd,
	0x04, 0x04, 0x4e, 0x68, 0x37, 0x74, 0x03, 0x52, 0x14, 0xd1, 0x20, 0x81, 0x14, 0x99, 0x6c, 0x51,
	0x34, 0x75, 0x26, 0xb1, 0x85, 0xed, 0x31, 0x9e, 0x09, 0xa8, 0x2c, 0x78, 0x05, 0xde, 0x0d, 0x89,
	0x37, 0xe0, 0x41, 0xd0, 0xfc, 0x38, 0x71, 0x92, 0xa6, 0x65, 0xe3, 0xd8, 0x27, 0xe7, 0xde, 0x73,
	0xce, 0x9d, 0x6b, 0xc3, 0xfe, 0x24, 0x8a, 0x49, 0x5b, 0x5c, 0xbc, 0x2c, 0xa7, 0x9c, 0xa2, 0xc6,
	0x34, 0xa5, 0x91, 0x27, 0x00, 0xe7, 0xf9, 0x34, 0xe2, 0xe1, 0xec, 0xda, 0x0b, 0x68, 0xd2, 0xa6,
	0x19, 0x49, 0x03, 0x9a, 0x4e, 0xa2, 0x69, 0x5b, 0x10, 0xda, 0xfc, 0x26, 0x23, 0x4c, 0x5d, 0x55,
	0xa1, 0xe3, 0xdd, 0xc1, 0x0e, 0x68, 0x92, 0xd0, 0x54, 0xff, 0x28, 0xbe, 0xfb, 0xc7, 0x00, 0x18,
	0xcc, 0xb8, 0x4f, 0xbe, 0xcc, 0x08, 0xe3, 0xe8, 0x02, 0x4c, 0x51, 0x65, 0x1b, 0xa7, 0x46, 0xcb,
	0x3a, 0x3f, 0xf1, 0xe6, 0x36, 0xbc, 0x05, 0xc9, 0xeb, 0x11, 0x8e, 0xa3, 0x98, 0xf5, 0x2b, 0xbe,
	0x24, 0xa3, 0x47, 0x50, 0x0f, 0x68, 0xca, 0x49, 0xca, 0x99, 0xbd, 0x75, 0x6a, 0xb4, 0x76, 0xfb,
	0x15, 0x7f, 0x8e, 0xa0, 0x67, 0x60, 0x86, 0x98, 0x85, 0x76, 0x55, 0xb6, 0x3c, 0x54, 0x2d, 0x95,
	0xe5, 0x3e, 0x66, 0xe1, 0xf0, 0x26, 0x23, 0xa2, 0x93, 0xe0, 0x38, 0xef, 0x61, 0x47, 0x37, 0x47,
	0x8f, 0xc1, 0xca, 0x49, 0x42, 0x39, 0x19, 0x09, 0x79, 0x69, 0xa8, 0xe1, 0x83, 0x82, 0xde, 0x46,
	0x31, 0x41, 0xa7, 0x60, 0x65, 0x24, 0x4f, 0x22, 0xc6, 0x22, 0x9a, 0x2a, 0xe1, 0xa6, 0x5f, 0x86,
	0xba, 0x0d, 0xd8, 0xc9, 0x95, 0x65, 0xb7, 0x09, 0x96, 0x0c, 0xc0, 0x32, 0x9a, 0x32, 0xe2, 0xbe,
	0x00, 0xb8, 0x22, 0xf3, 0xd0, 0xf7, 0x49, 0xb9, 0x01, 0x58, 0x92, 0xae, 0xaa, 0x97, 0xf2, 0x1a,
	0x1b, 0xf3, 0x6e, 0xdd, 0x9f, 0xb7, 0x0b, 0x50, 0xcf, 0x0b, 0x4f, 0x3f, 0xe0, 0x78, 0x98, 0xe3,
	0x94, 0x4d, 0x48, 0x3e, 0xa4, 0xbe, 0x14, 0x2f, 0x0c, 0x9e, 0x00, 0xc4, 0x34, 0xc0, 0xf1, 0x28,
	0xc3, 0x3c, 0xd4, 0xfe, 0x1a, 0x12, 0x19, 0x60, 0x1e, 0xa2, 0x1e, 0xec, 0x6b, 0xff, 0x63, 0xfa,
	0x2d, 0x8d, 0x29, 0x1e, 0x6b, 0xf1, 0x87, 0x4a, 0x5c, 0x1f, 0xb8, 0xea, 0xd9, 0xd3, 0x14, 0x7f,
	0x2f, 0x5f, 0x7a, 0x76, 0x7b, 0x60, 0xaf, 0xeb, 0xeb, 0xc4, 0x2d, 0x9d, 0xc9, 0xd8, 0x9c, 0x49,
	0x25, 0x72, 0x9f, 0x80, 0xf5, 0x91, 0xe3, 0xf9, 0x68, 0x11, 0x98, 0x25, 0xcf, 0xf2, 0xde, 0xbd,
	0x84, 0x5d, 0x45, 0xd1, 0xcd, 0x9f, 0x42, 0x8d, 0x71, 0x2c, 0x67, 0x59, 0x6d, 0x59, 0xe7, 0xff,
	0x95, 0x96, 0x4e, 0xf0, 0xde, 0xa5, 0x13, 0xea, 0x2b, 0x86, 0xfb, 0xd3, 0x80, 0x7a, 0x81, 0xdd,
	0xd6, 0x1b, 0x9d, 0x41, 0x33, 0xc6, 0x8c, 0x8f, 0x12, 0x3a, 0x8e, 0x26, 0x11, 0x51, 0x83, 0x30,
	0xfd, 0x5d, 0x01, 0x7e, 0xd0, 0xd8, 0xea, 0xe6, 0x54, 0xd7, 0x36, 0x47, 0xb4, 0x66, 0xd1, 0x77,
	0x62, 0x9b, 0xb2, 0x5a, 0xde, 0xa3, 0x43, 0xa8, 0xcd, 0x12, 0xcc, 0x3e, 0xdb, 0x35, 0xc9, 0x57,
	0x0f, 0x6e, 0x07, 0x9a, 0x62, 0x56, 0x5f, 0xc9, 0x3f, 0x2f, 0xd3, 0x01, 0xec, 0x15, 0x15, 0x6a,
	0x00, 0xe7, 0xbf, 0xb7, 0xc0, 0x94, 0x2b, 0xfd, 0x0a, 0xaa, 0x57, 0x84, 0xa3, 0xff, 0x4b, 0x13,
	0x58, 0xac, 0xa9, 0x73, 0xb4, 0x0a, 0xeb, 0xc5, 0xa9, 0x74, 0x0c, 0xf4, 0x09, 0x0e, 0x56, 0x0f,
	0x0f, 0xb9, 0x25, 0xfe, 0x86, 0xcd, 0x72, 0xce, 0xee, 0xe4, 0x14, 0x02, 0xc2, 0xd8, 0x60, 0xb6,
	0x6c, 0x6c, 0xf1, 0x3d, 0x58, 0x32, 0x56, 0x7e, 0xcb, 0x2a, 0x2d, 0x03, 0x5d, 0x82, 0x29, 0x0e,
	0x0c, 0x1d, 0xad, 0x9c, 0x6a, 0x51, 0x7b, 0xbc, 0x86, 0xcf, 0x45, 0xdf, 0xc0, 0xb6, 0x1a, 0x14,
	0xb2, 0x4b, 0xa4, 0xa5, 0x69, 0x3b, 0x0f, 0x6e, 0xf9, 0xa7, 0x68, 0xd0, 0xad, 0xff, 0x7a, 0x5d,
	0xeb, 0x78, 0x2f, 0xbd, 0xce, 0xf5, 0xb6, 0xfc, 0xd8, 0x5d, 0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff,
	0xdf, 0xe7, 0xb5, 0x47, 0x68, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FileClient is the client API for File service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FileClient interface {
	// Get reads and streams the contents of a file from the target.
	// The file is streamed by sequential messages, each containing up to
	// 64KB of data. A final message is sent prior to closing the stream
	// that contains the hash of the data sent. An error is returned
	// if the file does not exist or there was an error reading the file.
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (File_GetClient, error)
	// TransferToRemote transfers the contents of a file from the target to a
	// specified remote location. The response contains the hash of the data
	// transferred. An error is returned if the file does not exist, the file
	// transfer fails, or if there was an error reading the file. This is a
	// blocking call until the file transfer is complete.
	TransferToRemote(ctx context.Context, in *TransferToRemoteRequest, opts ...grpc.CallOption) (*TransferToRemoteResponse, error)
	// Put streams data into a file on the target. The file is sent in
	// sequential messages, each message containing up to 64KB of data. A final
	// message must be sent that includes the hash of the data sent. An
	// error is returned if the location does not exist or there is an error
	// writing the data. If no checksum is received, the target must assume the
	// operation is incomplete and remove the partially transmitted file. The
	// target should initially write the file to a temporary location so a failure
	// does not destroy the original file.
	Put(ctx context.Context, opts ...grpc.CallOption) (File_PutClient, error)
	// Stat returns metadata about a file on the target. An error is returned
	// if the file does not exist of there is an error in accessing the metadata.
	Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error)
	// Remove removes the specified file from the target. An error is
	// returned if the file does not exist, is a directory, or the remove
	// operation encounters an error (e.g., permission denied).
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error)
}

type fileClient struct {
	cc *grpc.ClientConn
}

func NewFileClient(cc *grpc.ClientConn) FileClient {
	return &fileClient{cc}
}

func (c *fileClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (File_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_File_serviceDesc.Streams[0], "/gnoi.file.File/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type File_GetClient interface {
	Recv() (*GetResponse, error)
	grpc.ClientStream
}

type fileGetClient struct {
	grpc.ClientStream
}

func (x *fileGetClient) Recv() (*GetResponse, error) {
	m := new(GetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileClient) TransferToRemote(ctx context.Context, in *TransferToRemoteRequest, opts ...grpc.CallOption) (*TransferToRemoteResponse, error) {
	out := new(TransferToRemoteResponse)
	err := c.cc.Invoke(ctx, "/gnoi.file.File/TransferToRemote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) Put(ctx context.Context, opts ...grpc.CallOption) (File_PutClient, error) {
	stream, err := c.cc.NewStream(ctx, &_File_serviceDesc.Streams[1], "/gnoi.file.File/Put", opts...)
	if err != nil {
		return nil, err
	}
	x := &filePutClient{stream}
	return x, nil
}

type File_PutClient interface {
	Send(*PutRequest) error
	CloseAndRecv() (*PutResponse, error)
	grpc.ClientStream
}

type filePutClient struct {
	grpc.ClientStream
}

func (x *filePutClient) Send(m *PutRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *filePutClient) CloseAndRecv() (*PutResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PutResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileClient) Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error) {
	out := new(StatResponse)
	err := c.cc.Invoke(ctx, "/gnoi.file.File/Stat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error) {
	out := new(RemoveResponse)
	err := c.cc.Invoke(ctx, "/gnoi.file.File/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServer is the server API for File service.
type FileServer interface {
	// Get reads and streams the contents of a file from the target.
	// The file is streamed by sequential messages, each containing up to
	// 64KB of data. A final message is sent prior to closing the stream
	// that contains the hash of the data sent. An error is returned
	// if the file does not exist or there was an error reading the file.
	Get(*GetRequest, File_GetServer) error
	// TransferToRemote transfers the contents of a file from the target to a
	// specified remote location. The response contains the hash of the data
	// transferred. An error is returned if the file does not exist, the file
	// transfer fails, or if there was an error reading the file. This is a
	// blocking call until the file transfer is complete.
	TransferToRemote(context.Context, *TransferToRemoteRequest) (*TransferToRemoteResponse, error)
	// Put streams data into a file on the target. The file is sent in
	// sequential messages, each message containing up to 64KB of data. A final
	// message must be sent that includes the hash of the data sent. An
	// error is returned if the location does not exist or there is an error
	// writing the data. If no checksum is received, the target must assume the
	// operation is incomplete and remove the partially transmitted file. The
	// target should initially write the file to a temporary location so a failure
	// does not destroy the original file.
	Put(File_PutServer) error
	// Stat returns metadata about a file on the target. An error is returned
	// if the file does not exist of there is an error in accessing the metadata.
	Stat(context.Context, *StatRequest) (*StatResponse, error)
	// Remove removes the specified file from the target. An error is
	// returned if the file does not exist, is a directory, or the remove
	// operation encounters an error (e.g., permission denied).
	Remove(context.Context, *RemoveRequest) (*RemoveResponse, error)
}

func RegisterFileServer(s *grpc.Server, srv FileServer) {
	s.RegisterService(&_File_serviceDesc, srv)
}

func _File_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileServer).Get(m, &fileGetServer{stream})
}

type File_GetServer interface {
	Send(*GetResponse) error
	grpc.ServerStream
}

type fileGetServer struct {
	grpc.ServerStream
}

func (x *fileGetServer) Send(m *GetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _File_TransferToRemote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferToRemoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).TransferToRemote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnoi.file.File/TransferToRemote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).TransferToRemote(ctx, req.(*TransferToRemoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_Put_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServer).Put(&filePutServer{stream})
}

type File_PutServer interface {
	SendAndClose(*PutResponse) error
	Recv() (*PutRequest, error)
	grpc.ServerStream
}

type filePutServer struct {
	grpc.ServerStream
}

func (x *filePutServer) SendAndClose(m *PutResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *filePutServer) Recv() (*PutRequest, error) {
	m := new(PutRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _File_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnoi.file.File/Stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).Stat(ctx, req.(*StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnoi.file.File/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _File_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gnoi.file.File",
	HandlerType: (*FileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransferToRemote",
			Handler:    _File_TransferToRemote_Handler,
		},
		{
			MethodName: "Stat",
			Handler:    _File_Stat_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _File_Remove_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _File_Get_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Put",
			Handler:       _File_Put_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "file/file.proto",
}
