/*
Package ocstruct is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /root/go/src/ovs-gnxi/vendor/github.com/openconfig/ygot/ygen/commongen.go
using the following YANG input files:
        - /root/go/src/ovs-gnxi/openconfig/models/public/release/models/openflow/openconfig-openflow.yang
Imported modules were sourced from:
        - /root/go/src/ovs-gnxi/openconfig/models/public/release/models/...
        - /root/go/src/ovs-gnxi/openconfig/models/yang/standard/ietf/RFC/...
*/
package ocstruct

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " + err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root:       &Device{},
		SchemaTree: uzp,
		Unmarshal:  Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn)
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	Interfaces      *IETFInterfaces_Interfaces      `path:"interfaces" module:"ietf-interfaces"`
	InterfacesState *IETFInterfaces_InterfacesState `path:"interfaces-state" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// IETFInterfaces_Interfaces represents the /ietf-interfaces/interfaces YANG schema element.
type IETFInterfaces_Interfaces struct {
	Interface map[string]*IETFInterfaces_Interfaces_Interface `path:"interface" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// IETFInterfaces_Interfaces struct. The keys of the list are populated from the input
// arguments.
func (t *IETFInterfaces_Interfaces) NewInterface(Name string) (*IETFInterfaces_Interfaces_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*IETFInterfaces_Interfaces_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &IETFInterfaces_Interfaces_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// IETFInterfaces_InterfacesState represents the /ietf-interfaces/interfaces-state YANG schema element.
type IETFInterfaces_InterfacesState struct {
	Interface map[string]*IETFInterfaces_InterfacesState_Interface `path:"interface" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that IETFInterfaces_InterfacesState implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_InterfacesState) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// IETFInterfaces_InterfacesState struct. The keys of the list are populated from the input
// arguments.
func (t *IETFInterfaces_InterfacesState) NewInterface(Name string) (*IETFInterfaces_InterfacesState_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*IETFInterfaces_InterfacesState_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &IETFInterfaces_InterfacesState_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_InterfacesState"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_InterfacesState) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// IETFInterfaces_InterfacesState_Interface represents the /ietf-interfaces/interfaces-state/interface YANG schema element.
type IETFInterfaces_InterfacesState_Interface struct {
	AdminStatus   E_IETFInterfaces_InterfacesState_Interface_AdminStatus `path:"admin-status" module:"ietf-interfaces"`
	HigherLayerIf []string                                               `path:"higher-layer-if" module:"ietf-interfaces"`
	IfIndex       *int32                                                 `path:"if-index" module:"ietf-interfaces"`
	LastChange    *string                                                `path:"last-change" module:"ietf-interfaces"`
	LowerLayerIf  []string                                               `path:"lower-layer-if" module:"ietf-interfaces"`
	Name          *string                                                `path:"name" module:"ietf-interfaces"`
	OperStatus    E_IETFInterfaces_InterfacesState_Interface_OperStatus  `path:"oper-status" module:"ietf-interfaces"`
	PhysAddress   *string                                                `path:"phys-address" module:"ietf-interfaces"`
	Speed         *uint64                                                `path:"speed" module:"ietf-interfaces"`
	Statistics    *IETFInterfaces_InterfacesState_Interface_Statistics   `path:"statistics" module:"ietf-interfaces"`
	Type          E_IETFInterfaces_InterfaceType                         `path:"type" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that IETFInterfaces_InterfacesState_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_InterfacesState_Interface) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFInterfaces_InterfacesState_Interface struct, which is a YANG list entry.
func (t *IETFInterfaces_InterfacesState_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState_Interface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_InterfacesState_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_InterfacesState_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// IETFInterfaces_InterfacesState_Interface_Statistics represents the /ietf-interfaces/interfaces-state/interface/statistics YANG schema element.
type IETFInterfaces_InterfacesState_Interface_Statistics struct {
	DiscontinuityTime *string `path:"discontinuity-time" module:"ietf-interfaces"`
	InBroadcastPkts   *uint64 `path:"in-broadcast-pkts" module:"ietf-interfaces"`
	InDiscards        *uint32 `path:"in-discards" module:"ietf-interfaces"`
	InErrors          *uint32 `path:"in-errors" module:"ietf-interfaces"`
	InMulticastPkts   *uint64 `path:"in-multicast-pkts" module:"ietf-interfaces"`
	InOctets          *uint64 `path:"in-octets" module:"ietf-interfaces"`
	InUnicastPkts     *uint64 `path:"in-unicast-pkts" module:"ietf-interfaces"`
	InUnknownProtos   *uint32 `path:"in-unknown-protos" module:"ietf-interfaces"`
	OutBroadcastPkts  *uint64 `path:"out-broadcast-pkts" module:"ietf-interfaces"`
	OutDiscards       *uint32 `path:"out-discards" module:"ietf-interfaces"`
	OutErrors         *uint32 `path:"out-errors" module:"ietf-interfaces"`
	OutMulticastPkts  *uint64 `path:"out-multicast-pkts" module:"ietf-interfaces"`
	OutOctets         *uint64 `path:"out-octets" module:"ietf-interfaces"`
	OutUnicastPkts    *uint64 `path:"out-unicast-pkts" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that IETFInterfaces_InterfacesState_Interface_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_InterfacesState_Interface_Statistics) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState_Interface_Statistics) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_InterfacesState_Interface_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_InterfacesState_Interface_Statistics) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// IETFInterfaces_Interfaces_Interface represents the /ietf-interfaces/interfaces/interface YANG schema element.
type IETFInterfaces_Interfaces_Interface struct {
	Description          *string                                                    `path:"description" module:"ietf-interfaces"`
	Enabled              *bool                                                      `path:"enabled" module:"ietf-interfaces"`
	LinkUpDownTrapEnable E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable `path:"link-up-down-trap-enable" module:"ietf-interfaces"`
	Name                 *string                                                    `path:"name" module:"ietf-interfaces"`
	Type                 E_IETFInterfaces_InterfaceType                             `path:"type" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFInterfaces_Interfaces_Interface struct, which is a YANG list entry.
func (t *IETFInterfaces_Interfaces_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// E_IETFInterfaces_InterfaceType is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_InterfaceType. An additional value named
// IETFInterfaces_InterfaceType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_InterfaceType int64

// IsYANGGoEnum ensures that IETFInterfaces_InterfaceType implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_InterfaceType can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_InterfaceType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_InterfaceType.
func (E_IETFInterfaces_InterfaceType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

const (
	// IETFInterfaces_InterfaceType_UNSET corresponds to the value UNSET of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_UNSET E_IETFInterfaces_InterfaceType = 0
)

// E_IETFInterfaces_InterfacesState_Interface_AdminStatus is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_InterfacesState_Interface_AdminStatus. An additional value named
// IETFInterfaces_InterfacesState_Interface_AdminStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_InterfacesState_Interface_AdminStatus int64

// IsYANGGoEnum ensures that IETFInterfaces_InterfacesState_Interface_AdminStatus implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_InterfacesState_Interface_AdminStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_InterfacesState_Interface_AdminStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_InterfacesState_Interface_AdminStatus.
func (E_IETFInterfaces_InterfacesState_Interface_AdminStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// IETFInterfaces_InterfacesState_Interface_AdminStatus_UNSET corresponds to the value UNSET of IETFInterfaces_InterfacesState_Interface_AdminStatus
	IETFInterfaces_InterfacesState_Interface_AdminStatus_UNSET E_IETFInterfaces_InterfacesState_Interface_AdminStatus = 0
	// IETFInterfaces_InterfacesState_Interface_AdminStatus_up corresponds to the value up of IETFInterfaces_InterfacesState_Interface_AdminStatus
	IETFInterfaces_InterfacesState_Interface_AdminStatus_up E_IETFInterfaces_InterfacesState_Interface_AdminStatus = 2
	// IETFInterfaces_InterfacesState_Interface_AdminStatus_down corresponds to the value down of IETFInterfaces_InterfacesState_Interface_AdminStatus
	IETFInterfaces_InterfacesState_Interface_AdminStatus_down E_IETFInterfaces_InterfacesState_Interface_AdminStatus = 3
	// IETFInterfaces_InterfacesState_Interface_AdminStatus_testing corresponds to the value testing of IETFInterfaces_InterfacesState_Interface_AdminStatus
	IETFInterfaces_InterfacesState_Interface_AdminStatus_testing E_IETFInterfaces_InterfacesState_Interface_AdminStatus = 4
)

// E_IETFInterfaces_InterfacesState_Interface_OperStatus is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_InterfacesState_Interface_OperStatus. An additional value named
// IETFInterfaces_InterfacesState_Interface_OperStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_InterfacesState_Interface_OperStatus int64

// IsYANGGoEnum ensures that IETFInterfaces_InterfacesState_Interface_OperStatus implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_InterfacesState_Interface_OperStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_InterfacesState_Interface_OperStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_InterfacesState_Interface_OperStatus.
func (E_IETFInterfaces_InterfacesState_Interface_OperStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// IETFInterfaces_InterfacesState_Interface_OperStatus_UNSET corresponds to the value UNSET of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_UNSET E_IETFInterfaces_InterfacesState_Interface_OperStatus = 0
	// IETFInterfaces_InterfacesState_Interface_OperStatus_up corresponds to the value up of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_up E_IETFInterfaces_InterfacesState_Interface_OperStatus = 2
	// IETFInterfaces_InterfacesState_Interface_OperStatus_down corresponds to the value down of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_down E_IETFInterfaces_InterfacesState_Interface_OperStatus = 3
	// IETFInterfaces_InterfacesState_Interface_OperStatus_testing corresponds to the value testing of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_testing E_IETFInterfaces_InterfacesState_Interface_OperStatus = 4
	// IETFInterfaces_InterfacesState_Interface_OperStatus_unknown corresponds to the value unknown of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_unknown E_IETFInterfaces_InterfacesState_Interface_OperStatus = 5
	// IETFInterfaces_InterfacesState_Interface_OperStatus_dormant corresponds to the value dormant of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_dormant E_IETFInterfaces_InterfacesState_Interface_OperStatus = 6
	// IETFInterfaces_InterfacesState_Interface_OperStatus_not_present corresponds to the value not_present of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_not_present E_IETFInterfaces_InterfacesState_Interface_OperStatus = 7
	// IETFInterfaces_InterfacesState_Interface_OperStatus_lower_layer_down corresponds to the value lower_layer_down of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_lower_layer_down E_IETFInterfaces_InterfacesState_Interface_OperStatus = 8
)

// E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable. An additional value named
// IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable int64

// IsYANGGoEnum ensures that IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable.
func (E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_UNSET corresponds to the value UNSET of IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable
	IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_UNSET E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable = 0
	// IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_enabled corresponds to the value enabled of IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable
	IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_enabled E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable = 2
	// IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_disabled corresponds to the value disabled of IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable
	IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_disabled E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable = 3
)

// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_IETFInterfaces_InterfaceType": {},
	"E_IETFInterfaces_InterfacesState_Interface_AdminStatus": {
		2: {Name: "up"},
		3: {Name: "down"},
		4: {Name: "testing"},
	},
	"E_IETFInterfaces_InterfacesState_Interface_OperStatus": {
		2: {Name: "up"},
		3: {Name: "down"},
		4: {Name: "testing"},
		5: {Name: "unknown"},
		6: {Name: "dormant"},
		7: {Name: "not-present"},
		8: {Name: "lower-layer-down"},
	},
	"E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable": {
		2: {Name: "enabled"},
		3: {Name: "disabled"},
	},
}

var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5d, 0x5d, 0x73, 0xda, 0x38,
		0x17, 0xbe, 0xcf, 0xaf, 0x60, 0x7c, 0xd5, 0xbc, 0x8d, 0xdf, 0x92, 0xc4, 0x0d, 0x09, 0x37, 0x9d,
		0x74, 0x93, 0xcc, 0x32, 0xdd, 0xee, 0x76, 0xda, 0xcc, 0x5e, 0x6c, 0xe9, 0x74, 0x54, 0x5b, 0x80,
		0x26, 0x20, 0x7b, 0x64, 0xb9, 0x09, 0xd3, 0xe5, 0xbf, 0xef, 0xf8, 0x03, 0x83, 0x3f, 0x88, 0x25,
		0x19, 0xe8, 0x47, 0x9e, 0x2b, 0xc0, 0x1c, 0xc9, 0xd2, 0x39, 0x8f, 0xce, 0x73, 0xce, 0xb1, 0x40,
		0xdf, 0x0e, 0x3a, 0x9d, 0x4e, 0xc7, 0xfa, 0x93, 0xcc, 0xa8, 0xd5, 0xef, 0x58, 0x1e, 0xfd, 0xca,
		0x5c, 0x6a, 0x1d, 0xa5, 0x57, 0xdf, 0x30, 0xee, 0x59, 0xfd, 0xce, 0x71, 0xf6, 0xf1, 0x37, 0x9f,
		0x8f, 0xd8, 0xd8, 0xea, 0x77, 0xba, 0xd9, 0x85, 0x2b, 0x26, 0xac, 0x7e, 0x27, 0xed, 0x22, 0xb9,
		0xc0, 0xb8, 0xa4, 0x62, 0x44, 0x5c, 0x1a, 0x16, 0xae, 0x17, 0x6e, 0xb1, 0x26, 0x73, 0x54, 0x94,
		0x28, 0xde, 0x2e, 0xbf, 0x5c, 0xbe, 0x6d, 0xfe, 0xc5, 0x3b, 0x41, 0x47, 0xec, 0xa1, 0x72, 0xa7,
		0xe2, 0xdd, 0x46, 0xa5, 0xbb, 0x24, 0xdf, 0x7e, 0xf0, 0x23, 0xe1, 0xd2, 0xda, 0x96, 0xe9, 0x48,
		0xe8, 0xfc, 0xde, 0x17, 0xf1, 0x60, 0xac, 0x20, 0xbd, 0xc9, 0x51, 0xbd, 0xe0, 0xef, 0x24, 0xbc,
		0x14, 0xe3, 0x68, 0x46, 0xb9, 0xb4, 0xfa, 0x1d, 0x29, 0x22, 0xba, 0x41, 0x70, 0x4d, 0x2a, 0x1e,
		0x53, 0x45, 0x68, 0x51, 0xb8, 0xb2, 0x28, 0xcd, 0xb4, 0xac, 0xe8, 0xaa, 0xc2, 0x37, 0xcf, 0xa5,
		0xa2, 0xf7, 0x4d, 0x73, 0xa9, 0x57, 0x7f, 0xa3, 0x19, 0x54, 0xcc, 0xa1, 0x66, 0x16, 0x55, 0xf3,
		0x68, 0x9b, 0x49, 0xdb, 0x5c, 0xca, 0x66, 0xab, 0x37, 0xdf, 0x06, 0x33, 0x36, 0x9a, 0x33, 0x17,
		0xf0, 0x68, 0xe8, 0x0a, 0x16, 0x48, 0xe6, 0xf3, 0x66, 0x2d, 0xac, 0xd6, 0xee, 0xaa, 0x51, 0xc3,
		0xb4, 0x32, 0x53, 0x77, 0x1b, 0xc4, 0x9a, 0x4c, 0xae, 0x63, 0x7a, 0x3d, 0x08, 0xe8, 0x42, 0xc1,
		0x18, 0x12, 0xc6, 0xd0, 0xd0, 0x86, 0xc8, 0xe3, 0x50, 0x69, 0x80, 0x4c, 0x7e, 0xb7, 0xdb, 0x79,
		0x40, 0xf5, 0xf4, 0x1c, 0x4a, 0xc1, 0xf8, 0x58, 0x45, 0xd7, 0x4b, 0x07, 0x70, 0x7e, 0x60, 0x36,
		0xfe, 0x47, 0xc6, 0x6e, 0x51, 0x4e, 0xbe, 0x4c, 0xa9, 0xa7, 0x8e, 0xe6, 0x65, 0x83, 0x06, 0x7d,
		0x5c, 0xd1, 0x11, 0x89, 0xa6, 0x89, 0xf2, 0x63, 0x9b, 0x01, 0xf8, 0x00, 0xfe, 0x52, 0xcf, 0x5f,
		0x7c, 0x7f, 0x4a, 0x09, 0xd7, 0x41, 0xfe, 0xf1, 0x0e, 0x90, 0x3f, 0x65, 0xfc, 0xce, 0x8e, 0x02,
		0xdb, 0xf3, 0xef, 0xb9, 0x2d, 0x05, 0x09, 0xec, 0x14, 0xda, 0xea, 0x4b, 0x61, 0x63, 0x0f, 0x00,
		0x3b, 0xc0, 0x9e, 0xbb, 0xcb, 0x68, 0x46, 0x05, 0x51, 0x20, 0xff, 0x02, 0xe0, 0x1d, 0x05, 0xd9,
		0x6b, 0x1e, 0xcd, 0xe2, 0xc1, 0x2c, 0x76, 0xb0, 0x38, 0x78, 0x3a, 0x7c, 0xc5, 0x85, 0x90, 0x48,
		0x03, 0xf4, 0x00, 0xfd, 0x0f, 0x15, 0xda, 0x48, 0x95, 0x71, 0xe7, 0x63, 0x4e, 0xa4, 0x81, 0x61,
		0x60, 0x78, 0xa9, 0x67, 0x8f, 0x72, 0xc9, 0xe4, 0x5c, 0xd0, 0x91, 0x0e, 0x90, 0x5f, 0x2a, 0xc8,
		0x0e, 0xb2, 0xae, 0x5f, 0x93, 0x50, 0xc3, 0x44, 0x95, 0x7a, 0x81, 0x9d, 0x40, 0xb6, 0xad, 0xe2,
		0xb6, 0x94, 0x3a, 0xbf, 0xa1, 0xf3, 0x06, 0x26, 0xb0, 0xfe, 0x60, 0xa1, 0xbc, 0x94, 0xb2, 0x21,
		0xc5, 0x7e, 0xcb, 0xf8, 0xf5, 0x94, 0xc6, 0xc8, 0x08, 0xad, 0x7e, 0x87, 0x47, 0xd3, 0xe9, 0x23,
		0x4b, 0xfc, 0x2d, 0x79, 0x50, 0x17, 0xfe, 0x4b, 0x78, 0x54, 0x50, 0xef, 0xf5, 0x3c, 0x13, 0xd5,
		0x9a, 0xdf, 0x25, 0xe7, 0xbe, 0x24, 0x8d, 0x89, 0xbf, 0x15, 0xba, 0x13, 0x3a, 0x23, 0x01, 0x91,
		0x93, 0x58, 0x1d, 0x2f, 0x18, 0x95, 0x23, 0x7b, 0x55, 0x59, 0x7b, 0x51, 0xf7, 0xf6, 0xb1, 0x8a,
		0x4b, 0x28, 0x45, 0xe4, 0xca, 0x8c, 0x8d, 0xad, 0xc1, 0xf5, 0xed, 0xcd, 0x20, 0xef, 0xe1, 0x73,
		0xdd, 0xdb, 0x7a, 0x3c, 0x2c, 0x34, 0xeb, 0x5a, 0x0d, 0xb3, 0x55, 0x9f, 0x65, 0x5d, 0x91, 0x4f,
		0x71, 0x4e, 0xc5, 0x99, 0xac, 0xc6, 0xbb, 0x36, 0xd6, 0xb5, 0x9a, 0xa5, 0x1d, 0x4a, 0x22, 0xa9,
		0x4a, 0x75, 0x33, 0x93, 0xd4, 0xac, 0x71, 0x9e, 0xa0, 0xc6, 0x89, 0x1a, 0xe7, 0x93, 0xa8, 0x71,
		0x12, 0x6f, 0xc6, 0x78, 0xb2, 0x48, 0xa2, 0x50, 0x3d, 0x7c, 0x2a, 0xb4, 0x42, 0x18, 0x85, 0x30,
		0xea, 0xe7, 0xce, 0x7f, 0x27, 0x6c, 0x3c, 0xa1, 0xc2, 0x9e, 0x92, 0x39, 0x15, 0x36, 0x1b, 0xa9,
		0xaf, 0x83, 0x72, 0x43, 0x2c, 0x05, 0x2c, 0x85, 0x4a, 0xe0, 0x9e, 0x44, 0x20, 0xb6, 0x66, 0x66,
		0xd1, 0x53, 0x90, 0x7d, 0x97, 0x47, 0x64, 0xa3, 0x7e, 0x39, 0xe2, 0x29, 0x5c, 0x8b, 0x3f, 0x24,
		0x11, 0x58, 0x2b, 0x1d, 0x28, 0x45, 0xf4, 0x46, 0x91, 0xbd, 0x51, 0x84, 0xaf, 0x17, 0xe9, 0xb7,
		0x73, 0x10, 0x2c, 0x0e, 0x78, 0x3d, 0xfa, 0xa0, 0xee, 0x19, 0xf2, 0x16, 0x70, 0x09, 0x70, 0x09,
		0x2b, 0x97, 0x70, 0x7a, 0xa2, 0xe1, 0x04, 0x4e, 0x15, 0x44, 0xdf, 0x13, 0x3e, 0x8e, 0x3b, 0xff,
		0xa8, 0xa4, 0x22, 0x35, 0xd3, 0x2d, 0xd7, 0xaf, 0xb2, 0xad, 0x35, 0xd1, 0x5c, 0x69, 0xf6, 0x37,
		0x99, 0x46, 0x74, 0x73, 0x42, 0xb0, 0xb1, 0xdd, 0x8d, 0x20, 0x6e, 0x1c, 0x6b, 0x5c, 0xb1, 0x31,
		0x4b, 0x3c, 0x46, 0x57, 0xb9, 0xfd, 0xe2, 0x48, 0x43, 0x15, 0xe4, 0x61, 0xef, 0xaa, 0x38, 0x39,
		0x76, 0x7a, 0xce, 0xf9, 0xe9, 0x99, 0xd3, 0xdb, 0xa3, 0x4e, 0x0e, 0xb6, 0x23, 0xf5, 0x69, 0x17,
		0xcf, 0xef, 0x48, 0x28, 0x6d, 0x77, 0x92, 0xa1, 0x5d, 0xf5, 0x91, 0xdd, 0x5a, 0x23, 0xf8, 0x61,
		0xf8, 0xe1, 0xe5, 0x16, 0x9d, 0x38, 0x1e, 0x23, 0xdc, 0xb3, 0x25, 0x6b, 0x7c, 0x92, 0x55, 0x7c,
		0x6e, 0xa1, 0x16, 0x94, 0x49, 0x2a, 0xb8, 0xb2, 0x4b, 0xb6, 0x86, 0x43, 0xef, 0x9b, 0xb3, 0xb0,
		0xe3, 0x97, 0x93, 0xe5, 0xcb, 0x6d, 0xfa, 0xd2, 0x2f, 0xbc, 0x3c, 0x1b, 0x0e, 0xff, 0x3f, 0x1c,
		0x7a, 0xcf, 0x0f, 0x5f, 0x3d, 0xfb, 0xe7, 0xdf, 0x8f, 0xc3, 0xe1, 0xf3, 0xe1, 0xd0, 0xfe, 0x54,
		0x90, 0x38, 0xb4, 0xbe, 0xcf, 0xda, 0xf4, 0xef, 0x8d, 0xb2, 0xa7, 0x52, 0x3b, 0xac, 0x50, 0xac,
		0x50, 0x24, 0x4f, 0xbf, 0x5e, 0xf2, 0x84, 0xdd, 0x05, 0x70, 0x05, 0xe6, 0xae, 0xe0, 0xc7, 0xd8,
		0x5d, 0xe0, 0x07, 0x54, 0x68, 0x57, 0xc9, 0xd7, 0x1b, 0x01, 0xd1, 0x40, 0xf4, 0xcf, 0x5d, 0x24,
		0x0f, 0x26, 0xf3, 0xd0, 0x26, 0x9e, 0x27, 0x68, 0xa8, 0xb1, 0x06, 0x0a, 0xad, 0xb0, 0x08, 0xb0,
		0x08, 0xf4, 0x71, 0xb1, 0xfb, 0x14, 0xec, 0xd9, 0xc7, 0xae, 0x7d, 0x41, 0xec, 0xd1, 0xa5, 0x7d,
		0xf3, 0x29, 0x4e, 0xb4, 0xfa, 0xc5, 0xcf, 0x87, 0xff, 0x3b, 0x7c, 0xf5, 0x7d, 0x32, 0xab, 0x30,
		0xa0, 0x3a, 0xbb, 0xf5, 0x53, 0x71, 0xac, 0x32, 0xac, 0xb2, 0x4c, 0xcf, 0x63, 0x12, 0x8d, 0xe9,
		0x99, 0xa3, 0xb1, 0xc0, 0xce, 0x9f, 0x5a, 0xcd, 0xb9, 0x8b, 0x9a, 0x73, 0x5e, 0x7e, 0x3f, 0x77,
		0x9c, 0xb3, 0x9e, 0xe3, 0x74, 0x7b, 0xa7, 0xbd, 0xee, 0xc5, 0xcb, 0x97, 0xc7, 0x67, 0x2a, 0x1b,
		0x1c, 0x9f, 0x42, 0xf5, 0x39, 0x0e, 0xe2, 0x59, 0x28, 0x99, 0xab, 0x11, 0xf9, 0xac, 0xb5, 0x51,
		0xf3, 0xc8, 0xc7, 0xf0, 0xc8, 0x3f, 0x9b, 0x47, 0x6e, 0xda, 0x5e, 0x95, 0x0b, 0x7a, 0x2c, 0x74,
		0x7d, 0x2e, 0x19, 0x8f, 0x98, 0x9c, 0xa7, 0x75, 0x67, 0xed, 0xad, 0xc0, 0x35, 0x7d, 0x28, 0x2a,
		0x45, 0xcf, 0x2f, 0x28, 0x03, 0xcd, 0x04, 0x70, 0x66, 0xc0, 0x33, 0x05, 0x60, 0x6b, 0x20, 0xb6,
		0x06, 0xa4, 0x31, 0x30, 0x35, 0xdd, 0xa2, 0xa2, 0xa5, 0x94, 0x43, 0x88, 0x2a, 0xfa, 0x34, 0x1f,
		0x9a, 0x98, 0x44, 0xee, 0xc6, 0x11, 0x7c, 0xde, 0x70, 0xbf, 0x0f, 0x53, 0xd4, 0x28, 0x47, 0xdd,
		0x92, 0x0a, 0x56, 0xb4, 0x18, 0xb7, 0xbf, 0x08, 0x9f, 0x78, 0x2e, 0x09, 0xa5, 0x1d, 0xdc, 0xc9,
		0xd0, 0xe4, 0x37, 0x05, 0xe5, 0x2e, 0xe0, 0x47, 0xe0, 0x47, 0xf6, 0xe4, 0x47, 0x5c, 0x3f, 0xe2,
		0x92, 0x0a, 0xa5, 0xa4, 0xc4, 0x20, 0x39, 0x31, 0x4c, 0x52, 0xf4, 0x93, 0x95, 0x56, 0x49, 0x4b,
		0xcb, 0x88, 0xbd, 0x6d, 0x12, 0xb3, 0x8d, 0x70, 0xdd, 0x20, 0xa9, 0x69, 0x95, 0xdc, 0x6c, 0x5b,
		0x65, 0xed, 0x93, 0x9d, 0xad, 0x6a, 0xf1, 0x60, 0x37, 0xd2, 0x7b, 0x66, 0xa6, 0x38, 0x44, 0x25,
		0xc2, 0x33, 0xe3, 0xa4, 0xbc, 0x31, 0xd8, 0x08, 0x6c, 0xb4, 0x5f, 0x36, 0x52, 0xda, 0x96, 0x59,
		0x06, 0x5e, 0x0f, 0x6c, 0x04, 0x36, 0xda, 0x92, 0xca, 0x9c, 0x93, 0x0b, 0xe7, 0xe2, 0xac, 0x77,
		0x72, 0x01, 0x0e, 0x6a, 0xcb, 0x41, 0x54, 0x08, 0x5f, 0x98, 0x31, 0x50, 0xd6, 0x14, 0xfc, 0x03,
		0xfe, 0x01, 0xff, 0x80, 0x7f, 0xc0, 0x3f, 0xe0, 0x1f, 0x7d, 0xfe, 0x99, 0x45, 0x53, 0xc9, 0xda,
		0x55, 0xe7, 0x4a, 0x5d, 0x80, 0x8f, 0xc0, 0x47, 0xa8, 0xce, 0x81, 0x8f, 0x50, 0x9d, 0x03, 0x33,
		0xb5, 0x61, 0x26, 0xdf, 0x95, 0xd4, 0x90, 0x91, 0xb2, 0xa6, 0x60, 0x22, 0x30, 0x11, 0x98, 0x08,
		0x4c, 0x04, 0x26, 0x02, 0x13, 0xb5, 0x61, 0xa2, 0x88, 0xb7, 0xcc, 0x90, 0x0a, 0x1d, 0x80, 0x95,
		0xc0, 0x4a, 0x60, 0x25, 0xb0, 0x12, 0x58, 0x09, 0xac, 0xd4, 0x8e, 0x95, 0xee, 0xb8, 0x7f, 0xcf,
		0xed, 0x40, 0xf8, 0xd2, 0x37, 0xe5, 0xa5, 0x42, 0x17, 0x60, 0x26, 0x30, 0xd3, 0x7e, 0x99, 0x09,
		0x4f, 0x92, 0xc0, 0x4c, 0x78, 0x92, 0xf4, 0x0b, 0xf0, 0x91, 0x1f, 0xc9, 0xd6, 0x1b, 0xbd, 0x6b,
		0xfa, 0x00, 0x23, 0x81, 0x91, 0x90, 0x2b, 0x81, 0x91, 0x90, 0x2b, 0x81, 0x9b, 0x5a, 0x71, 0x93,
		0xf9, 0x56, 0xef, 0x42, 0x6b, 0xf0, 0x11, 0xf8, 0x08, 0x19, 0x12, 0xf8, 0x08, 0x19, 0x12, 0x58,
		0xc8, 0x80, 0x85, 0x4c, 0x37, 0x7b, 0xaf, 0xb5, 0x05, 0x03, 0x81, 0x81, 0xc0, 0x40, 0x60, 0x20,
		0x30, 0x10, 0x18, 0xc8, 0x80, 0x81, 0xda, 0x6e, 0xf7, 0xae, 0xe9, 0x03, 0x8c, 0x04, 0x46, 0x42,
		0x8d, 0x0e, 0x8c, 0x84, 0x1a, 0x1d, 0xb8, 0xa9, 0x15, 0x37, 0x99, 0x6e, 0xf8, 0x5e, 0x6b, 0x0b,
		0x2e, 0x02, 0x17, 0x81, 0x8b, 0xc0, 0x45, 0xe0, 0x22, 0x70, 0x51, 0x2b, 0x2e, 0x6a, 0xb7, 0xe5,
		0xbb, 0xd2, 0x03, 0x78, 0x09, 0xbc, 0x04, 0x5e, 0x02, 0x2f, 0x81, 0x97, 0xc0, 0x4b, 0x06, 0x12,
		0x4d, 0x7f, 0xec, 0x7c, 0xc9, 0xb9, 0x2f, 0xd3, 0x23, 0x5a, 0x94, 0xfe, 0xdf, 0x39, 0x74, 0x27,
		0x74, 0x46, 0x82, 0xfc, 0x4c, 0x31, 0x2a, 0x47, 0xf6, 0xea, 0x54, 0xb1, 0x17, 0xd5, 0x03, 0xc6,
		0xf2, 0xd3, 0xc5, 0x94, 0xff, 0x26, 0x3c, 0xbd, 0x8f, 0x14, 0x91, 0x2b, 0xb3, 0x13, 0xb5, 0xac,
		0xc1, 0xf5, 0xed, 0xcd, 0x20, 0xef, 0xfa, 0xf3, 0xea, 0xed, 0x87, 0xf8, 0x26, 0xab, 0xcf, 0x9f,
		0x3f, 0xac, 0x6e, 0xb2, 0x83, 0x7f, 0x47, 0x97, 0x2a, 0xae, 0x35, 0x77, 0xa7, 0x89, 0x34, 0xce,
		0xa8, 0xc0, 0x19, 0x15, 0x4b, 0x3d, 0x7b, 0x94, 0x4b, 0x26, 0xe7, 0x9a, 0x67, 0xfc, 0x29, 0xb8,
		0x3e, 0x6b, 0x90, 0x75, 0xfd, 0x9a, 0x84, 0xd4, 0xe4, 0xe7, 0x1c, 0xcb, 0x43, 0x08, 0x13, 0xc8,
		0xb6, 0x55, 0xdc, 0x81, 0xde, 0x37, 0x1b, 0x14, 0x1d, 0x03, 0xa8, 0xe1, 0x98, 0x3c, 0xb5, 0xb3,
		0x06, 0xb5, 0xce, 0x18, 0xd4, 0x3a, 0x5b, 0x50, 0xed, 0x4c, 0xc1, 0x4d, 0xf3, 0x53, 0xf4, 0xbc,
		0xe6, 0x1e, 0xd7, 0x7a, 0xf4, 0x9c, 0x07, 0x13, 0xf7, 0x5a, 0x0f, 0x8d, 0xaa, 0x59, 0x8b, 0x57,
		0x4a, 0x0a, 0x68, 0x9a, 0xb8, 0xee, 0x84, 0x6b, 0xa6, 0xa9, 0x35, 0xbd, 0xe2, 0xa4, 0x56, 0x43,
		0x4f, 0xdf, 0x65, 0x83, 0xdf, 0x34, 0x68, 0x8b, 0x85, 0x37, 0xe4, 0x8e, 0xbe, 0xf7, 0xfd, 0xaa,
		0xb3, 0x2a, 0x4f, 0xc4, 0x5a, 0xff, 0xaa, 0x30, 0xc0, 0x2b, 0xfa, 0x95, 0x2d, 0xb5, 0xbb, 0x38,
		0x58, 0xfc, 0x07, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x4e, 0xd0, 0x15,
		0x25, 0x9f, 0x00, 0x00,
	}
)

// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
	"/interfaces-state/interface/admin-status": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_InterfacesState_Interface_AdminStatus)(0)),
	},
	"/interfaces-state/interface/oper-status": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_InterfacesState_Interface_OperStatus)(0)),
	},
	"/interfaces-state/interface/type": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_InterfaceType)(0)),
	},
	"/interfaces/interface/link-up-down-trap-enable": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable)(0)),
	},
	"/interfaces/interface/type": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_InterfaceType)(0)),
	},
}
